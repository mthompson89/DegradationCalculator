return(summary(lmer(x1~x2+x3+x4 + (1|x6),data = df2)))
}
sim()
sim()
df2 <- data.frame(x1 =runif(300),
x2 =sample(c('M','F'),300,replace = T),
x3 =runif(300),
x4 =runif(300),
x5 =runif(300),
x6 = as.integer(sample(c(2018,2019,2020,2021,2022),300,replace = T)))
sim <- function(){
df <- data.frame(x1 =runif(300),
x2 =sample(c('M','F'),300,replace = T),
x3 =runif(300),
x4 =runif(300),
x5 =runif(300),
x6 = sample(c("2018","2019","2020","2021","2022"),300,replace = T))
df2 <- data.frame(x1 =runif(300),
x2 =sample(c('M','F'),300,replace = T),
x3 =runif(300),
x4 =runif(300),
x5 =runif(300),
x6 = as.integer(sample(c(2018,2019,2020,2021,2022),300,replace = T)))
return(summary(lmer(x1~x2+x3+x4 + (1|x6),data = df2)))
}
sim()
CCA
sim()
sim()
sim()
sim <- function(){
df <- data.frame(x1 =runif(300),
x2 =sample(c('M','F'),300,replace = T),
x3 =runif(300),
x4 =runif(300),
x5 =runif(300),
x6 = sample(c("2018","2019","2020","2021","2022"),300,replace = T))
return(summary(lmer(x1~x2+x3+x4 + (1|x6),data = df)))
}
sim()
sim()
sim()
sim()
sim()
df <- data.frame(x1 =runif(300),
x2 =sample(c('M','F'),300,replace = T),
x3 =runif(300),
x4 =runif(300),
x5 =runif(300),
x6 = sample(c("2018","2019","2020","2021","2022"),300,replace = T))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
summary(lmer(x1~x2+x3+x4 + (1|x6),data = df))
df <- data.frame(x1 =runif(300),
x2 =sample(c('M','F'),300,replace = T),
x3 =runif(300),
x4 =runif(300),
x5 =runif(300),
x6 = sample(c("2018","2019","2020","2021","2022"),300,replace = T))
df <- data.frame(x1 =runif(300),
x2 =sample(c('M','F'),300,replace = T),
x3 =runif(300),
x4 =runif(300),
x5 =runif(300),
x6 = sample(c("2018","2019","2020","2021","2022"),300,replace = T))
shiny::runApp('C:/Users/mthom/OneDrive - USNH/Current Grants/AFRI Grant/BirdNet_DO NOT PUSH TO GIT')
library(tidyverse)
library(tidycensus)
library(stringr)
census_api_key("1a6b6ed3da90bc2d86b61a45741f4f299542324b", install = TRUE, overwrite = TRUE)
DPvariables = load_variables(year = 2020, dataset = "dp")
View(DPvariables)
DPvariables = load_variables(year = 2020, dataset = "dp")
View(DPvariables)
DPvariables2010 = load_variables(year = 2010, dataset = "dp")
DPvariables2010 = load_variables(year = 2011, dataset = "dp")
>load_variables()
?load_variables()
DPvariables2010 = load_variables(year = 2009, dataset = "dp")
DPvariables2010 = load_variables(year = 2010, dataset = "dp")
DPvariables2010 = load_variables(year = 2010, dataset = "cd113profile")
View(DPvariables2010)
DPvariables2010 = load_variables(year = 2010, dataset = "cd113")
View(DPvariables2010)
DPvariablesCD2020 = load_variables(year = 2020, dataset = "cd118")
View(DPvariablesCD2020)
View(DPvariables)
View(DPvariablesCD2020)
View(DPvariables)
cdVar2010 <- c("P029007")
cdVar2020 <- ("P17_011N")
CD118Dat <- get_decennial(
geography = "county subdivision",
variables = c("P17_011N"),
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2020,
sumfile = "cd118")
CD118Dat <- get_decennial(
geography = 521,
variables = c("P17_011N"),
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2020,
sumfile = "cd118")
?get_decennial
CD118Dat <- get_decennial(
geography = "county",
variables = c("P17_011N"),
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2020,
sumfile = "cd118")
CD118Dat <- get_decennial(
geography = "congressional district",
variables = c("P17_011N"),
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2020,
sumfile = "cd118")
View(CD118Dat)
DPvariablesCD2020 = load_variables(year = 2020, dataset = "sf1")
DPvariablesCD2020 = load_variables(year = 2020, dataset = "dhc")
DPvariablesCD2010 = load_variables(year = 2010, dataset = "sf1")
View(DPvariablesCD2020)
DPvariablesCD2010 = load_variables(year = 2010, dataset = "sf1")
CensusDat1 <- get_decennial(
geography = "county subdivision",
variables = "H005006",
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2010,
sumfile = "sf1") %>%
cdVar2020 <-c("P17_011N")
CensusDat1 <- get_decennial(
geography = "county subdivision",
variables = "H005006",
state = c("NH"),
year = 2010,
sumfile = "sf1") %>%
cdVar2020 <-c("P17_011N")
CensusDat1 <- get_decennial(
geography = "county subdivision",
variables = "H005006",
state = c("NH"),
year = 2010,
sumfile = "sf2") %>%
cdVar2020 <-c("P17_011N")
CensusDat1 <- get_decennial(
geography = "county subdivision",
variables = c("H005006"),
state = c("NH"),
year = 2010,
sumfile = "sf2") %>%
cdVar2020 <-c("P17_011N")
View(DPvariablesCD2010)
View(DPvariablesCD2020)
View(DPvariables)
DPvariablesCD2020 = load_variables(year = 2020, dataset = "dhc", cache = T)
View(DPvariablesCD2020)
View(DPvariablesCD2020)
CensusDat1 <- get_decennial(
geography = "county",
variables = c("H005006"),
state = c("NH"),
year = 2010,
sumfile = "sf2") %>%
cdVar2020 <-c("P17_011N")
CensusDat1 <- get_decennial(
geography = "state",
variables = "H005006",
year = 2010,
sumfile = "sf1") %>%
cdVar2020 <-c("P17_011N")
CensusDat1 <- get_decennial(
geography = "county subdivision",
variables = "H005006",
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2010,
sumfile = "sf1")
View(CensusDat1)
CensusDat1 <- get_decennial(
geography = "county subdivision",
variables = "H005001",
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2010,
sumfile = "sf1")
View(CensusDat1)
DPvariablesCD2020 = load_variables(year = 2020, dataset = "dhc")
View(DPvariables2010)
View(DPvariablesCD2010)
DPvariables = load_variables(year = 2020, dataset = "dp")
popVar <- c( "DP1_0001C", "DP1_0079P","DP1_0115P",'DP1_0116P',
"DP1_0132C","DP1_0149C",'DP1_0149P',
"DP1_0148C","DP1_0148P","DP1_0147C",
"DP1_0160C","DP1_0160P","DP1_0154P","DP1_0154C")
perpop <- DPvariables %>%
filter(name %in% popVar) %>%
mutate(variable = name,
label = sub("!!.*!!"," ",label)) %>%
select(variable,label)
View(perpop)
varClean <- function(allVar,SelVar){
perpop <- allVar %>%
filter(name %in% SelVar) %>%
mutate(variable = name,
label = sub("!!.*!!"," ",label)) %>%
select(variable,label)
return(perpop)
}
HouVar10sel <- c("H005001","H005002","H005003","H005004","H005005","H005006","H005007","H005008","H003002","H003003")
HouVar10 <- varClean(DPvariablesCD2010,HouVar10sel)
View(HouVar10)
HouVar20sel <- c("H5_001N","H5_002N","H5_003N","H5_004N","H5_005N","H5_006N","H5_007N","H5_008N","H3_002N","H3_003N")
HouVar20 <- varClean(DPvariablesCD2020,HouVar20sel)
View(HouVar20)
CensusDat1_2010 <- get_decennial(
geography = "county subdivision",
variables = HouVar10sel,
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2010,
sumfile = "sf1")
View(CensusDat1_2010)
CensusDat1_2010 <- get_decennial(
geography = "county subdivision",
variables = HouVar10sel,
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2010,
sumfile = "sf1") %>%
left_join(HouVar10, by = "variable") %>%
mutate(town = str_extract(NAME,boundary('word')),
county = str_extract(NAME, "(?<=,\\s)(.*?)(?=,)"),
state = str_extract(NAME, "(?:[^,]+, ){2}(.+)",group = 1))
View(CensusDat1_2010)
CensusDat_2010 <- get_decennial(
geography = "county subdivision",
variables = HouVar10sel,
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2010,
sumfile = "sf1") %>%
left_join(HouVar10, by = "variable") %>%
mutate(town = str_extract(NAME,boundary('word')),
county = str_extract(NAME, "(?<=,\\s)(.*?)(?=,)"),
state = str_extract(NAME, "(?:[^,]+, ){2}(.+)",group = 1)) %>%
pivot_wider(id_cols = GEOID,
names_from = label,
values_from = value) %>%
left_join(CensusDat1[,c("GEOID","town","county","state")],by = "GEOID") %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0))
CensusDat_2010 <- get_decennial(
geography = "county subdivision",
variables = HouVar10sel,
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2010,
sumfile = "sf1") %>%
left_join(HouVar10, by = "variable") %>%
mutate(town = str_extract(NAME,boundary('word')),
county = str_extract(NAME, "(?<=,\\s)(.*?)(?=,)"),
state = str_extract(NAME, "(?:[^,]+, ){2}(.+)",group = 1)) %>%
pivot_wider(id_cols = GEOID,
names_from = label,
values_from = value) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0))
View(CensusDat_2010)
CensusDat_2020 <- get_decennial(
geography = "county subdivision",
variables = HouVar20sel,
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2020,
sumfile = "sf1") %>%
left_join(HouVar20, by = "variable") %>%
mutate(town = str_extract(NAME,boundary('word')),
county = str_extract(NAME, "(?<=,\\s)(.*?)(?=,)"),
state = str_extract(NAME, "(?:[^,]+, ){2}(.+)",group = 1)) %>%
pivot_wider(id_cols = GEOID,
names_from = label,
values_from = value) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0))
CensusDat_2020 <- get_decennial(
geography = "county subdivision",
variables = HouVar20sel,
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2020,
sumfile = "dhc") %>%
left_join(HouVar20, by = "variable") %>%
mutate(town = str_extract(NAME,boundary('word')),
county = str_extract(NAME, "(?<=,\\s)(.*?)(?=,)"),
state = str_extract(NAME, "(?:[^,]+, ){2}(.+)",group = 1)) %>%
pivot_wider(id_cols = GEOID,
names_from = label,
values_from = value) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0))
View(CensusDat_2020)
View(CensusDat_2010)
View(CensusDat_2020)
View(HouVar10)
View(HouVar20)
HouVar10 <- varClean(DPvariablesCD2010,HouVar10sel) %>%
mutate(label = c(c("Occupied", "Vacant","VacForRent","VacRented","VacForSale","VacSold","VacSecHome","VacMigWork","VacOther")))
HouVar10sel <- c("H005002","H005003","H005004","H005005","H005006","H005007","H005008","H003002","H003003")
HouVar10 <- varClean(DPvariablesCD2010,HouVar10sel) %>%
mutate(label = c(c("Occupied", "Vacant","VacForRent","VacRented","VacForSale","VacSold","VacSecHome","VacMigWork","VacOther")))
View(HouVar10)
HouVar20sel <- c("H5_002N","H5_003N","H5_004N","H5_005N","H5_006N","H5_007N","H5_008N","H3_002N","H3_003N")
HouVar20sel <- c("H5_002N","H5_003N","H5_004N","H5_005N","H5_006N","H5_007N","H5_008N","H3_002N","H3_003N")
HouVar20 <- varClean(DPvariablesCD2020,HouVar20sel)%>%
mutate(label = c(c("Occupied", "Vacant","VacForRent","VacRented","VacForSale","VacSold","VacSecHome","VacMigWork","VacOther")))
CensusDat_2010 <- get_decennial(
geography = "county subdivision",
variables = HouVar10sel,
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2010,
sumfile = "sf1") %>%
left_join(HouVar10, by = "variable") %>%
mutate(town = str_extract(NAME,boundary('word')),
county = str_extract(NAME, "(?<=,\\s)(.*?)(?=,)"),
state = str_extract(NAME, "(?:[^,]+, ){2}(.+)",group = 1)) %>%
pivot_wider(id_cols = GEOID,
names_from = label,
values_from = value) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0))
View(CensusDat_2010)
CensusDat_2020 <- get_decennial(
geography = "county subdivision",
variables = HouVar20sel,
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = 2020,
sumfile = "dhc") %>%
left_join(HouVar20, by = "variable") %>%
mutate(town = str_extract(NAME,boundary('word')),
county = str_extract(NAME, "(?<=,\\s)(.*?)(?=,)"),
state = str_extract(NAME, "(?:[^,]+, ){2}(.+)",group = 1)) %>%
pivot_wider(id_cols = GEOID,
names_from = label,
values_from = value) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0))
View(CensusDat_2010)
View(CensusDat_2020)
DPvariables = load_variables(year = 2020, dataset = "dp")
DemVar <- c( "DP1_0001C", "DP1_0079P","DP1_0115P",'DP1_0116P',
"DP1_0132C","DP1_0149C",'DP1_0149P',
"DP1_0148C","DP1_0148P","DP1_0147C",
"DP1_0160C","DP1_0160P","DP1_0154P","DP1_0154C")
DemVar20 <- varClean(DPvariables,DemVar)
View(DemVar20)
getData <- function(varsFile,varsLabs,year,source){
CensusDat_2010 <- get_decennial(
geography = "county subdivision",
variables = varsLabs,
state = c("NH","NY","ME","VT","MA","CT","RI"),
year = year,
sumfile = source) %>%
left_join(varsFile, by = "variable") %>%
mutate(town = str_extract(NAME,boundary('word')),
county = str_extract(NAME, "(?<=,\\s)(.*?)(?=,)"),
state = str_extract(NAME, "(?:[^,]+, ){2}(.+)",group = 1)) %>%
pivot_wider(id_cols = GEOID,
names_from = label,
values_from = value) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0))
}
HousingDat_2010 <- getData(HouVar10,HouVar10sel,2010,'sf1')
View(HousingDat_2010)
DemDat_2020 <- getData(DemVar20,DemVar,2020,'dp')
View(DemDat_2020)
getwd)
getwd()
install.packages('installr')
library(installr)
updateR()
library(shiny); runApp('D:/BirdNET/BirdNetValidatorFramework/BirdNETValidatingFramework/appAudioFileSampler.R')
runApp('D:/BirdNET/BirdNetValidatorFramework/BirdNETValidatingFramework/appAudioFileSampler.R')
shiny::runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
runApp('D:/Personal Projects/DegradationCalculator')
sg_ref <- as.data.frame(read_csv('sg_ref.csv')) %>%
filter(desirability > 4) %>%
filter("Northeast" == 1)
sg_ref <- as.data.frame(read_csv('D:\Personal Projects\DegradationCalculator\sg_ref.csv')) %>%
sg_ref <- as.data.frame(read_csv('D:/Personal Projects/DegradationCalculator/sg_ref.csv')) %>%
filter(desirability > 4) %>%
filter("Northeast" == 1)
View(sg_ref)
sg_ref <- as.data.frame(read_csv('D:/Personal Projects/DegradationCalculator/sg_ref.csv')) %>%
filter(desirability > 4) %>%
filter(Northeast == 1)
sg_ref <- as.data.frame(read_csv('D:/Personal Projects/DegradationCalculator/sg_ref.csv')) %>%
filter(desirability > 4)
View(sg_ref)
sg_ref <- as.data.frame(read_csv('D:/Personal Projects/DegradationCalculator/sg_ref2.csv')) %>%
filter(desirability > 4)
sg_ref <- as.data.frame(read_csv('D:/Personal Projects/DegradationCalculator/sg_ref2.csv')) %>%
filter(desirability > 4)
setwd("D:/Personal Projects/DegradationCalculator")
sg_ref <- as.data.frame(read_csv('D:/Personal Projects/DegradationCalculator/SG_ref2.csv')) %>%
filter(desirability > 4)
sg_ref <- as.data.frame(read_csv('D:/Personal Projects/DegradationCalculator/SG_ref_2.csv')) %>%
filter(desirability > 4)
View(sg_ref)
sg_ref <- as.data.frame(read_csv('D:/Personal Projects/DegradationCalculator/SG_ref_2.csv')) %>%
filter(desirability < 4)
View(sg_ref)
runApp()
sg_ref <- as.data.frame(read_csv('D:/Personal Projects/DegradationCalculator/SG_ref_2.csv')) %>%
filter(desirability < 4) %>%
filter('Northeast' == 1)
sg_ref <- as.data.frame(read_csv('D:/Personal Projects/DegradationCalculator/SG_ref_2.csv')) %>%
filter(desirability < 4) %>%
filter(Northeast == 1)
View(sg_ref)
runApp()
source("~/.active-rstudio-document")
View(server)
library(shiny)
ui <- fluidPage(
titlePanel("Party Sample"),
sidebarLayout(
sidebarPanel(
selectizeInput("Party", "Party", choices = NULL),
selectizeInput("County", label= "Region", choices = NULL),
),
mainPanel(
tableOutput("tableonesix")
)
)
)
#
server <- function(input, output, session) {
# DUMMY DATA
df <- reactiveVal(data.frame(Democrats = 1:10, Republicans = 10:1,
Libertarians = 1:10, GreenParty = 10:1,
County = sample(c("A", "B", "C"), 10, TRUE)))
observe({
# select only the party columns 1-4; 5 is the county column
updateSelectizeInput(session, "Party", choices = colnames(df()[1:4]))
# Get counties without duplicates
updateSelectizeInput(session, "County", choices = unique(df()$County))
})
output$tableonesix <- renderTable({
# Do not run unless selects have a usable value
req(input$Party, input$County)
# Select: here in base R (not dplyr)
df()[df()$County == input$County, input$Party]
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
SpDataframe <- as.data.frame(read_csv('sg_ref.csv')) %>%
filter(desirability < 4)
sg_ref <-SpDataframe[which(SpDataframe$"Northeast" == 1),]
View(sg_ref)
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
